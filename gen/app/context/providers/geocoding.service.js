// Generated by ContextProviderGenerator
"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
// Contains Objects that push new data to the Context Controller
// Code for API/Library access has to be inserted in the file:"geocoding.service.ts" 
// in the folder: static/app/context/providers/
var core_1 = require('@angular/core');
var Rx_1 = require('rxjs/Rx');
var Weather_1 = require('../types/Weather');
// PROTECTED REGION END
var GeocodingService = (function () {
    // PROTECTED REGION END
    function GeocodingService() {
        // PROTECTED REGION ID constructor ENABLED START
        var _this = this;
        this._locationSubject = new Rx_1.BehaviorSubject("init");
        this.locationSubject = this._locationSubject.asObservable();
        this._weatherSubject = new Rx_1.BehaviorSubject(0);
        this.weatherSubject = this._weatherSubject.asObservable();
        // PROTECTED REGION ID geocoding ENABLED START
        this.geocoder = new google.maps.Geocoder;
        //init value for latitude and longitude
        this.latlng = new google.maps.LatLng({ lat: 51, lng: 8 });
        this.openWeatherMapKey = "ebc3bac589e89ccc0cf69213042400c5";
        this.apixuKey = "8d10ab661a23465188a100438172306";
        // PROTECTED REGION ID addMethods ENABLED START
        this.proccessResults = function () {
            var results = JSON.parse(_this.request.responseText);
            // if (results != undefined) {
            // 	var condition = results.weather[0].main;
            // 	switch(condition){
            // 		case "Clear":{ this.weather = Weather.sunny; break;}
            // 		case "Rain":{ this.weather = Weather.rainy; break;}
            // 		default:{ this.weather = Weather.cloudy;}
            // 	}
            // }
            if (results != undefined) {
                var condition = results.current.condition.code;
                //console.log(condition);
                switch (condition) {
                    case 1000: {
                        _this.weather = Weather_1.Weather.sunny;
                        break;
                    }
                    case 1003 || 1006 || 1009 || 1030: {
                        _this.weather = Weather_1.Weather.cloudy;
                        break;
                    }
                    default: {
                        _this.weather = Weather_1.Weather.rainy;
                    }
                }
            }
        };
        // PROTECTED REGION END
    }
    GeocodingService.prototype.getLocation = function () {
        // PROTECTED REGION ID location ENABLED START
        var _this = this;
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function (position) {
                _this.la = "" + position.coords.latitude;
                _this.lo = "" + position.coords.longitude;
                _this.latlng = new google.maps.LatLng({ lat: parseFloat(_this.la), lng: parseFloat(_this.lo) });
            });
        }
        else {
            console.log('Geolocation not supported');
        }
        this.geocoder.geocode({ 'location': this.latlng }, function (results, status) {
            if (status === google.maps.GeocoderStatus.OK) {
                if (results[1]) {
                    _this.location = "" + results[1].formatted_address;
                }
                else {
                    console.log('No location results found');
                }
            }
            else {
                console.log('Geocoder failed due to: ' + status);
            }
        });
        // PROTECTED REGION END
        this._locationSubject.next(this.location);
    };
    GeocodingService.prototype.getWeather = function () {
        // PROTECTED REGION ID weather ENABLED START
        // console.log('Weather is called');
        if (this.la != undefined && this.lo != undefined) {
            // var requestString = "http://api.openweathermap.org/data/2.5/weather?"
            // 					+ "lat=" + this.la + "&" + "lon=" + this.lo
            // 					+ "&cluster=yes&format=json"
            // 					+ "&apikey=" + this.openWeatherMapKey;
            // this.request = new XMLHttpRequest();
            // this.request.onload = this.proccessResults;
            // this.request.open("get", requestString, true);
            // this.request.send();
            var requestString = "https://api.apixu.com/v1/current.json?"
                + "key=" + this.apixuKey
                + "&q=" + this.la + "," + this.lo;
            this.request = new XMLHttpRequest();
            this.request.onload = this.proccessResults;
            this.request.open("get", requestString, true);
            this.request.send();
        }
        // PROTECTED REGION END
        this._weatherSubject.next(this.weather);
    };
    GeocodingService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [])
    ], GeocodingService);
    return GeocodingService;
}());
exports.GeocodingService = GeocodingService;
//# sourceMappingURL=geocoding.service.js.map